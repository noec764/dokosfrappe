workflow:
  rules:
    # Exclude commits with a title containing "[no-ci]"
    - if: $CI_COMMIT_TITLE =~ /\[no-ci\]/
      when: never

    # Don't run for the source branch if there is an open merge request (to avoid duplicate builds)
    # https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never

    # Don't run for forks, unless either triggered by a maintainer, or the MR is approved
    - if: ($CI_MERGE_REQUEST_SOURCE_PROJECT_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_ID != $CI_PROJECT_ID) && ($GITLAB_USER_EMAIL !~ /@dokos\.io$/ && $CI_MERGE_REQUEST_APPROVED != "true")
      when: never

    # Don't run when MR is tagged "Skip CI"
    - if: $CI_MERGE_REQUEST_LABELS =~ /Skip CI/
      when: never

    # Run for merge requests, or...
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

    # or run if the branch is the v3.x.x, v3.x.x-hotfix, main, master or develop branch
    - if: $CI_COMMIT_REF_NAME =~ /(\.x\.x|main|master|develop)/

    # or run if there is a tag
    - if: $CI_COMMIT_TAG != null

    # or if branch name starts with "ci-"
    - if: $CI_COMMIT_REF_NAME =~ /^ci-/

stages:
  - Unit Tests
  - Docker Dodock

variables:
  DOCLI_IMAGE: "registry.gitlab.com/dokos/docli:ci-develop"

unittests:
  image: $DOCLI_IMAGE
  stage: Unit Tests

  rules:
    # Skip if the commit message contains "[skip-tests]"
    - if: $CI_COMMIT_MESSAGE =~ /\[skip-tests\]/
      when: never
    - when: on_success

    # Skip on scheduled pipelines
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never

  services:
    - name: mariadb:10.6
      command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci', '--character-set-client-handshake=FALSE', '--innodb_read_only_compressed=OFF']
    - name: redis
      alias: redis_queue
    - name: redis
      alias: redis_cache
    - name: redis
      alias: redis_socketio

  variables:
    MYSQL_DATABASE: "test_dodock"
    MYSQL_ROOT_PASSWORD: "test_dodock"

  before_script:
    - bench init . --ignore-exist --no-backups --skip-redis-config-generation --skip-assets --frappe-path /builds/dokos/dodock/
    - /ci-utils/setup-redis.sh v1
    - /ci-utils/patch-procfile.sh v1
    - cp -r apps/frappe/test_sites/test_site sites/
    - bench setup requirements --dev
    - bench start > bench_start.log &
    - bench build --app frappe &
    - build_pid=$!
    - bench --site test_site reinstall --yes --mariadb-root-password test_dodock
    - bench --site test_site add-to-hosts
    - wait $build_pid

  script:
    - bench --site test_site run-parallel-tests --app frappe

build_docker:
  stage: Docker Dodock
  rules:
    # Run if the commit is tagged or if its message contains "[build-docker]"
    - if: $CI_COMMIT_TAG != null
    - if: $CI_COMMIT_MESSAGE =~ /\[build-docker\]/

    # Skip on scheduled pipelines
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never

  image: docker:git
  services:
    - docker:dind
  variables:
    DODOCK_BRANCH: "${CI_COMMIT_REF_NAME}"
  script:
    # Set image tag
    - IMAGE_TAG=$CI_COMMIT_TAG
    - if [ -z "$IMAGE_TAG" ]; then
        IMAGE_TAG=$CI_COMMIT_SHORT_SHA;
      fi

    # Override image tag from commit message if it contains "[docker-tag=<branch>]"
    - TAG_FROM_COMMIT_MESSAGE=$(echo "$CI_COMMIT_MESSAGE" | sed -n 's/.*\[docker-tag=\(.*\)\].*/\1/p')
    - if [ -n "$TAG_FROM_COMMIT_MESSAGE" ]; then IMAGE_TAG="$TAG_FROM_COMMIT_MESSAGE"; fi

    # Set image name
    - IMAGE_NAME="$CI_REGISTRY_IMAGE:$IMAGE_TAG"

    - echo "Building image $IMAGE_NAME"
    - git clone https://github.com/frappe/frappe_docker.git
    - cd frappe_docker
    - >
      docker build \
        --build-arg=FRAPPE_PATH=https://gitlab.com/dokos/dodock \
        --build-arg=FRAPPE_BRANCH=$DODOCK_BRANCH \
        --build-arg=PYTHON_VERSION=3.10 \
        --build-arg=NODE_VERSION=18.16.1 \
        --tag=$IMAGE_NAME \
        --file=images/custom/Containerfile .

    - echo "Logging in to registry $CI_REGISTRY"
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

    - echo "Pushing image $IMAGE_NAME"
    - docker push $IMAGE_NAME

    # Push latest tag if the commit is tagged
    - if [ -n "$CI_COMMIT_TAG" ]; then
        N="$CI_REGISTRY_IMAGE:latest";
        echo "Pushing image $N";
        docker tag $IMAGE_NAME $N;
        docker push $N;
      fi

    # Push hotfix tag if the commit is on the hotfix branch
    - if [ "$CI_COMMIT_REF_NAME" = "v3.x.x-hotfix" ]; then
        N="$CI_REGISTRY_IMAGE:hotfix";
        echo "Pushing image $N";
        docker tag $IMAGE_NAME $N;
        docker push $N;
      fi

    # Push develop tag if the commit is on the develop branch
    - if [ "$CI_COMMIT_REF_NAME" = "develop" ]; then
        N="$CI_REGISTRY_IMAGE:develop";
        echo "Pushing image $N";
        docker tag $IMAGE_NAME $N;
        docker push $N;
      fi
